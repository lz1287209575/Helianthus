###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

module(
    name = "helianthus",
    version = "1.0.0",
)

bazel_dep(name = "bazel_skylib", version = "1.7.1")

# C++ rules
bazel_dep(name = "rules_cc", version = "0.1.1")

# Python rules (required by some dependencies)
bazel_dep(name = "rules_python", version = "0.25.0")

# Google Test
bazel_dep(name = "googletest", version = "1.15.2")

# nlohmann/json for RPC serialization
bazel_dep(name = "nlohmann_json", version = "3.11.2")

# Foreign CC (build C/C++ libraries via CMake/Autotools/Make)
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")

# Provide legacy repo names that some third-party expect
bazel_dep(name = "abseil-cpp", version = "20240722.0", repo_name = "com_google_absl")
# protobuf via BCR may not provide legacy repo_name; we will add http_archive fallback below

# Introduce tcmalloc as a module and override to upstream repo
bazel_dep(name = "tcmalloc")
archive_override(
    module_name = "tcmalloc",
    urls = [
        "https://github.com/google/tcmalloc/archive/refs/heads/master.tar.gz",
    ],
    strip_prefix = "tcmalloc-master",
)

# Non-module dependencies using extension
deps = use_extension("@bazel_tools//tools/build_defs/repo:non_module_dependencies.bzl", "non_module_dependencies")

# Import http_archive and new_local_repository functions
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
new_local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "new_local_repository")

# spdlog dependency (using Gitee mirror)
http_archive(
    name = "spdlog",
    build_file = "//ThirdParty:spdlog.BUILD",
    sha256 = "697f91700237dbae2326b90469be32b876b2b44888302afbc7aceb68bcfe8224",
    strip_prefix = "spdlog-1.10.0",
    urls = [
        #        "https://gitee.com/mirrors/spdlog/repository/archive/v1.10.0.tar.gz",
        "https://github.com/gabime/spdlog/archive/v1.10.0.tar.gz",  # fallback
    ],
)

# Mongo C Driver (dependency of mongo-cxx-driver), pulled from GitHub.
# Note: sha256 omitted for convenience; add it for reproducible builds.
http_archive(
    name = "mongo_c_driver_src",
    strip_prefix = "mongo-c-driver-1.24.4",
    urls = [
        "https://github.com/mongodb/mongo-c-driver/archive/refs/tags/1.24.4.tar.gz",
    ],
    build_file = "//ThirdParty:mongo_c_driver.BUILD",
)

# Legacy gperftools kept (not used when module tcmalloc works)
http_archive(
    name = "gperftools",
    strip_prefix = "gperftools-gperftools-2.10",
    urls = [
        "https://github.com/gperftools/gperftools/archive/gperftools-2.10.tar.gz",
    ],
    build_file = "//ThirdParty:gperftools.BUILD",
)

# Fallback legacy repos expected by tcmalloc when not provided via modules
http_archive(
    name = "com_google_protobuf",
    strip_prefix = "protobuf-25.1",
    urls = [
        "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v25.1.tar.gz",
    ],
)

########################################
# Prebuilt libraries via local repos   #
########################################
new_local_repository(
    name = "mysql_prebuilt",
    path = "ThirdParty/mariadb_prebuilt",  # You will create/copy this folder
    build_file = "//ThirdParty:mariadb_prebuilt.BUILD",
)

new_local_repository(
    name = "mongo_prebuilt",
    path = "ThirdParty/mongo_prebuilt",    # You will create/copy this folder
    build_file = "//ThirdParty:mongo_prebuilt.BUILD",
)

new_local_repository(
    name = "hiredis",
    path = "ThirdParty/hiredis",
    build_file = "//ThirdParty:hiredis.BUILD",
)
