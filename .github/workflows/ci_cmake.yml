name: Helianthus CMake CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - test-only

  schedule:
    - cron: '0 2 * * *'

env:
  CONAN_VERSION: 2.0.0
  CMAKE_VERSION: 3.28.0

jobs:
  # 构建和测试作业
  build-and-test:
    name: Build and Test (${{ matrix.os }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc
            conan_profile: linux
          - os: ubuntu-22.04
            compiler: clang
            conan_profile: linux
          - os: ubuntu-24.04
            compiler: gcc
            conan_profile: linux
          - os: windows-latest
            compiler: msvc
            conan_profile: windows
          - os: macos-latest
            compiler: clang
            conan_profile: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-24.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-pip \
          git \
          curl \
          wget

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja python3

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake ninja python3 git

    - name: Install Conan
      run: |
        pip install conan

    - name: Configure Conan
      run: |
        conan profile detect --force
        conan remote add conan-center https://mirrors.tuna.tsinghua.edu.cn/conan/conan-center || true
        conan remote add bincrafters https://mirrors.tuna.tsinghua.edu.cn/conan/bincrafters || true

    - name: Create build directory
      run: mkdir build

    - name: Install dependencies
      run: |
        cd build
        conan install .. --build=missing --settings=build_type=Release

    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -DCMAKE_GENERATOR=Ninja \
          -DHELIANTHUS_BUILD_TESTS=ON \
          -DHELIANTHUS_BUILD_EXAMPLES=ON \
          -DHELIANTHUS_ENABLE_LOGGING=ON \
          -DHELIANTHUS_USE_TCMALLOC=ON

    - name: Build project
      run: |
        cd build
        cmake --build . --config Release --parallel

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --parallel

    - name: Install project
      run: |
        cd build
        cmake --install . --prefix ../install

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: helianthus-build-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/
          install/
        retention-days: 7

    - name: Incremental rebuild (single class micro-change)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # 记录初始时间戳
        echo "== Touch one header to simulate micro change =="
        TARGET_HDR=Examples/MetaExtensionDemo.h
        test -f ${TARGET_HDR} && sed -i '1i \\// ci-touch' ${TARGET_HDR}
        cd build
        /usr/bin/time -f 'INCR_BUILD_SECONDS=%E' -o ../incr_metrics.txt cmake --build . --config Release --parallel || true
        # 恢复文件（去掉插入的第一行）
        cd ..
        test -f ${TARGET_HDR} && sed -i '1d' ${TARGET_HDR}
        echo "Incremental build completed."

    - name: Publish incremental build metrics
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "== Incremental Build Metrics ==" | tee -a incr_metrics.txt
        cat incr_metrics.txt | tee -a "$GITHUB_STEP_SUMMARY"

    - name: Upload incremental metrics artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: incremental-build-metrics
        path: incr_metrics.txt
        retention-days: 7

  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-pip \
          clang-format \
          cppcheck

    - name: Install Conan
      run: pip install conan

    - name: Configure Conan
      run: |
        conan profile detect --force
        conan remote add conan-center https://mirrors.tuna.tsinghua.edu.cn/conan/conan-center || true

    - name: Code formatting check
      run: |
        find . -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | xargs clang-format --dry-run --Werror

    - name: Static analysis
      run: |
        cppcheck --enable=all --inconclusive --std=c++20 --suppress=missingIncludeSystem \
          --suppress=unusedFunction --suppress=unmatchedSuppression \
          Shared/ Examples/ Tests/ --error-exitcode=1

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-pip

    - name: Install Conan
      run: pip install conan

    - name: Configure Conan
      run: |
        conan profile detect --force
        conan remote add conan-center https://mirrors.tuna.tsinghua.edu.cn/conan/conan-center || true

    - name: Create build directory
      run: mkdir build

    - name: Install dependencies
      run: |
        cd build
        conan install .. --build=missing --settings=build_type=Release

    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -DCMAKE_GENERATOR=Ninja \
          -DHELIANTHUS_BUILD_TESTS=ON \
          -DHELIANTHUS_BUILD_EXAMPLES=ON \
          -DHELIANTHUS_ENABLE_LOGGING=ON \
          -DHELIANTHUS_USE_TCMALLOC=ON

    - name: Build project
      run: |
        cd build
        cmake --build . --config Release --parallel

    - name: Run security scan
      run: |
        cd build
        ctest --output-on-failure --parallel

  # 性能测试
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-pip

    - name: Install Conan
      run: pip install conan

    - name: Configure Conan
      run: |
        conan profile detect --force
        conan remote add conan-center https://mirrors.tuna.tsinghua.edu.cn/conan/conan-center || true

    - name: Create build directory
      run: mkdir build

    - name: Install dependencies
      run: |
        cd build
        conan install .. --build=missing --settings=build_type=Release

    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -DCMAKE_GENERATOR=Ninja \
          -DHELIANTHUS_BUILD_TESTS=ON \
          -DHELIANTHUS_BUILD_EXAMPLES=ON \
          -DHELIANTHUS_ENABLE_LOGGING=ON \
          -DHELIANTHUS_USE_TCMALLOC=ON

    - name: Build project
      run: |
        cd build
        cmake --build . --config Release --parallel

    - name: Run performance tests
      run: |
        cd build
        ./bin/examples/performance_benchmark
        ./bin/examples/performance_test

  # 容器构建
  container-build:
    name: Container Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Containers/Dockerfile
        push: false
        tags: helianthus:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container
      run: |
        docker run --rm helianthus:latest --version

  # 发布
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan, performance-test]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-pip

    - name: Install Conan
      run: pip install conan

    - name: Configure Conan
      run: |
        conan profile detect --force
        conan remote add conan-center https://mirrors.tuna.tsinghua.edu.cn/conan/conan-center || true

    - name: Create build directory
      run: mkdir build

    - name: Install dependencies
      run: |
        cd build
        conan install .. --build=missing --settings=build_type=Release

    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -DCMAKE_GENERATOR=Ninja \
          -DHELIANTHUS_BUILD_TESTS=ON \
          -DHELIANTHUS_BUILD_EXAMPLES=ON \
          -DHELIANTHUS_ENABLE_LOGGING=ON \
          -DHELIANTHUS_USE_TCMALLOC=ON

    - name: Build project
      run: |
        cd build
        cmake --build . --config Release --parallel

    - name: Install project
      run: |
        cd build
        cmake --install . --prefix ../install

    - name: Create release package
      run: |
        tar -czf helianthus-${{ github.ref_name }}-linux-x64.tar.gz -C install .

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./helianthus-${{ github.ref_name }}-linux-x64.tar.gz
        asset_name: helianthus-${{ github.ref_name }}-linux-x64.tar.gz
        asset_content_type: application/gzip


