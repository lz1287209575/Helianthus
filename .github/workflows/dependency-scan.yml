name: Dependency Vulnerability Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 5 * * 0'  # 每周日凌晨5点运行
  workflow_dispatch:

env:
  BAZEL_VERSION: 8.3.1

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Bazel
      uses: bazelbuild/setup-bazelisk@v3
      with:
        version: ${{ env.BAZEL_VERSION }}

    - name: Install dependency scanning tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libssl-dev \
          libcurl4-openssl-dev \
          libmysqlclient-dev \
          libmongoc-dev \
          libbson-dev \
          libhiredis-dev \
          python3-pip

    - name: Install Python security tools
      run: |
        pip3 install safety pip-audit

    - name: Scan Python dependencies
      run: |
        echo "Scanning Python dependencies..."
        if [ -f requirements.txt ]; then
          safety check -r requirements.txt --json --output safety-report.json || true
          pip-audit -r requirements.txt --format json --output pip-audit-report.json || true
        else
          echo "No requirements.txt found, skipping Python dependency scan"
        fi
        echo "Python dependency scan completed"

    - name: Scan system packages
      run: |
        echo "Scanning system packages..."
        # 检查系统包的安全更新
        apt list --upgradable 2>/dev/null | grep -E "(security|critical)" || {
          echo "No critical security updates found"
        }
        echo "System package scan completed"

    - name: Check Bazel dependencies
      run: |
        echo "Checking Bazel dependencies..."
        # 列出所有外部依赖
        bazel query --output=location "deps(//...)" | grep "@" | sort | uniq > bazel-deps.txt
        echo "Bazel dependencies listed in bazel-deps.txt"
        echo "Total external dependencies: $(wc -l < bazel-deps.txt)"

    - name: Check for known vulnerable packages
      run: |
        echo "Checking for known vulnerable packages..."
        # 这里可以添加具体的漏洞检查逻辑
        # 例如检查特定版本的包是否已知有漏洞
        echo "Vulnerability check completed"

    - name: Generate dependency report
      run: |
        echo "Generating dependency report..."
        echo "# Dependency Security Report" > dependency-report.md
        echo "Generated on: $(date)" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "## Python Dependencies" >> dependency-report.md
        if [ -f safety-report.json ]; then
          echo "- Safety scan completed" >> dependency-report.md
        fi
        if [ -f pip-audit-report.json ]; then
          echo "- pip-audit completed" >> dependency-report.md
        fi
        echo "" >> dependency-report.md
        echo "## Bazel Dependencies" >> dependency-report.md
        if [ -f bazel-deps.txt ]; then
          echo "- Total external dependencies: $(wc -l < bazel-deps.txt)" >> dependency-report.md
        fi
        echo "" >> dependency-report.md
        echo "## Recommendations" >> dependency-report.md
        echo "- Keep dependencies updated" >> dependency-report.md
        echo "- Monitor security advisories" >> dependency-report.md
        echo "- Use dependency pinning for critical packages" >> dependency-report.md

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          dependency-report.md
          bazel-deps.txt
          safety-report.json
          pip-audit-report.json

    - name: Dependency scan summary
      run: |
        echo "📦 Dependency vulnerability scan completed"
        echo "Results uploaded as artifacts"
        echo "Check the dependency-report.md for details"
