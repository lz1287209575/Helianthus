name: Dependency Vulnerability Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 5 * * 0'  # 每周日凌晨5点运行
  workflow_dispatch:

env:
  BAZEL_VERSION: 8.3.1

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Bazel
      uses: bazelbuild/setup-bazelisk@v3
      with:
        version: ${{ env.BAZEL_VERSION }}

    - name: Install dependency scanning tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libssl-dev \
          libcurl4-openssl-dev \
          libmysqlclient-dev \
          libmongoc-dev \
          libbson-dev \
          libhiredis-dev \
          python3-pip \
          wget \
          unzip \
          openjdk-11-jdk

    - name: Install Python security tools
      run: |
        pip3 install safety pip-audit

    - name: Install OWASP Dependency Check
      run: |
        echo "Installing OWASP Dependency Check..."
        wget -q https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-8.4.0-release.zip
        unzip -q dependency-check-8.4.0-release.zip
        chmod +x dependency-check/bin/dependency-check.sh
        echo "OWASP Dependency Check installed successfully"

    - name: Scan Python dependencies
      run: |
        echo "Scanning Python dependencies..."
        if [ -f requirements.txt ]; then
          safety check -r requirements.txt --json --output safety-report.json || true
          pip-audit -r requirements.txt --format json --output pip-audit-report.json || true
        else
          echo "No requirements.txt found, skipping Python dependency scan"
        fi
        echo "Python dependency scan completed"

    - name: Scan system packages
      run: |
        echo "Scanning system packages..."
        # 检查系统包的安全更新
        apt list --upgradable 2>/dev/null | grep -E "(security|critical)" || {
          echo "No critical security updates found"
        }
        echo "System package scan completed"

    - name: Check Bazel dependencies
      run: |
        echo "Checking Bazel dependencies..."
        # 列出所有外部依赖
        bazel query --output=location "deps(//...)" | grep "@" | sort | uniq > bazel-deps.txt
        echo "Bazel dependencies listed in bazel-deps.txt"
        echo "Total external dependencies: $(wc -l < bazel-deps.txt)"

    - name: Run OWASP Dependency Check
      run: |
        echo "Running OWASP Dependency Check..."
        if [ -f suppression.xml ]; then
          echo "Using suppression file: suppression.xml"
          ./dependency-check/bin/dependency-check.sh \
            --project "Helianthus" \
            --scan . \
            --suppression suppression.xml \
            --format HTML \
            --format JSON \
            --out reports/ \
            --enableRetired \
            --failOnCVSS 9 \
            --noupdate || echo "Dependency check completed with warnings"
        else
          echo "No suppression file found, running without suppressions"
          ./dependency-check/bin/dependency-check.sh \
            --project "Helianthus" \
            --scan . \
            --format HTML \
            --format JSON \
            --out reports/ \
            --enableRetired \
            --failOnCVSS 9 \
            --noupdate || echo "Dependency check completed with warnings"
        fi
        echo "OWASP Dependency Check completed"

    - name: Generate dependency report
      run: |
        echo "Generating dependency report..."
        echo "# Dependency Security Report" > dependency-report.md
        echo "Generated on: $(date)" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "## Python Dependencies" >> dependency-report.md
        if [ -f safety-report.json ]; then
          echo "- Safety scan completed" >> dependency-report.md
        fi
        if [ -f pip-audit-report.json ]; then
          echo "- pip-audit completed" >> dependency-report.md
        fi
        echo "" >> dependency-report.md
        echo "## Bazel Dependencies" >> dependency-report.md
        if [ -f bazel-deps.txt ]; then
          echo "- Total external dependencies: $(wc -l < bazel-deps.txt)" >> dependency-report.md
        fi
        echo "" >> dependency-report.md
        echo "## OWASP Dependency Check" >> dependency-report.md
        if [ -f reports/dependency-check-report.html ]; then
          echo "- OWASP Dependency Check completed successfully" >> dependency-report.md
          echo "- HTML report available in reports/dependency-check-report.html" >> dependency-report.md
        else
          echo "- OWASP Dependency Check failed or not available" >> dependency-report.md
        fi
        echo "" >> dependency-report.md
        echo "## Recommendations" >> dependency-report.md
        echo "- Keep dependencies updated" >> dependency-report.md
        echo "- Monitor security advisories" >> dependency-report.md
        echo "- Use dependency pinning for critical packages" >> dependency-report.md
        echo "- Review OWASP Dependency Check results regularly" >> dependency-report.md

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          dependency-report.md
          bazel-deps.txt
          safety-report.json
          pip-audit-report.json
          reports/

    - name: Dependency scan summary
      run: |
        echo "📦 Dependency vulnerability scan completed"
        echo "Results uploaded as artifacts"
        echo "Check the dependency-report.md for details"
