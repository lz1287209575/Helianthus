name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 4 * * 0'  # 每周日凌晨4点运行
  workflow_dispatch:

env:
  BAZEL_VERSION: 8.3.1

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Bazel
      uses: bazelbuild/setup-bazelisk@v3
      with:
        version: ${{ env.BAZEL_VERSION }}

    - name: Install security tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libssl-dev \
          libcurl4-openssl-dev \
          libmysqlclient-dev \
          libmongoc-dev \
          libbson-dev \
          libhiredis-dev \
          python3-pip

    - name: Install Python security tools
      run: |
        pip3 install bandit safety

    - name: Run bandit security scan
      run: |
        echo "Running bandit security scan..."
        find . -name "*.py" -type f | xargs bandit -r -f json -o bandit-report.json || true
        echo "Bandit scan completed"

    - name: Check for hardcoded secrets
      run: |
        echo "Checking for hardcoded secrets..."
        # 检查常见的密钥模式
        grep -r -i "password\|secret\|key\|token\|api_key" \
          --exclude-dir=.git \
          --exclude-dir=bazel-* \
          --exclude-dir=.bazel \
          --exclude=*.md \
          --exclude=*.yml \
          --exclude=*.yaml || {
          echo "No obvious hardcoded secrets found"
        }
        echo "Secret check completed"

    - name: Check for unsafe functions
      run: |
        echo "Checking for unsafe C++ functions..."
        find Shared/ Tests/ Examples/ -name "*.cpp" -o -name "*.h" | \
        xargs grep -l "strcpy\|strcat\|sprintf\|gets\|scanf" || {
          echo "No obvious unsafe functions found"
        }
        echo "Unsafe function check completed"

    - name: Check for buffer overflow vulnerabilities
      run: |
        echo "Checking for potential buffer overflow issues..."
        find Shared/ Tests/ Examples/ -name "*.cpp" -o -name "*.h" | \
        xargs grep -l "memcpy\|memmove\|strncpy\|strncat" || {
          echo "No obvious buffer overflow risks found"
        }
        echo "Buffer overflow check completed"

    - name: Run Valgrind memory check
      run: |
        echo "Running Valgrind memory check..."
        # 构建测试目标
        bazel build //Tests/Config:config_manager_test
        # 运行Valgrind检查
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
          --track-origins=yes --verbose --log-file=valgrind-out.txt \
          bazel-bin/Tests/Config/config_manager_test || true
        echo "Valgrind check completed"

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          valgrind-out.txt

    - name: Security scan summary
      run: |
        echo "🔒 Security scan completed"
        echo "Results uploaded as artifacts"
        if [ -f bandit-report.json ]; then
          echo "Bandit report generated"
        fi
        if [ -f valgrind-out.txt ]; then
          echo "Valgrind report generated"
        fi
