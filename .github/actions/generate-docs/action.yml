name: 'Generate Documentation'
description: 'Generate Helianthus documentation with custom configuration'
inputs:
  doc-types:
    description: 'Documentation types to generate (comma-separated)'
    required: false
    default: 'api,user-guides'
  output-format:
    description: 'Output format for documentation'
    required: false
    default: 'html'
  include-examples:
    description: 'Include examples in documentation'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: 'Generate API documentation'
      shell: bash
      if: contains(inputs.doc-types, 'api')
      run: |
        echo "Generating API documentation..."
        
        # 检查doxygen是否可用
        if command -v doxygen >/dev/null 2>&1; then
          echo "Doxygen found, generating API docs..."
          
          # 创建Doxyfile
          cat > Doxyfile << 'EOF'
PROJECT_NAME = "Helianthus API"
PROJECT_NUMBER = "1.0"
PROJECT_BRIEF = "高性能、可扩展的微服务游戏服务器架构"
OUTPUT_DIRECTORY = docs/doxygen
GENERATE_HTML = YES
GENERATE_LATEX = NO
EXTRACT_ALL = YES
EXTRACT_PRIVATE = YES
EXTRACT_STATIC = YES
HAVE_DOT = YES
UML_LOOK = YES
CALL_GRAPH = YES
CALLER_GRAPH = YES
INPUT = Shared/
FILE_PATTERNS = *.h *.cpp *.hpp
RECURSIVE = YES
EXCLUDE_PATTERNS = */ThirdParty/* */Tests/*
HTML_OUTPUT = html
HTML_TIMESTAMP = YES
GENERATE_LATEX = NO
EOF
          
          # 生成文档
          doxygen Doxyfile
          echo "API documentation generated successfully"
        else
          echo "Doxygen not found, skipping API docs generation"
        fi

    - name: 'Generate user guides'
      shell: bash
      if: contains(inputs.doc-types, 'user-guides')
      run: |
        echo "Generating user guides..."
        
        # 创建用户指南目录
        mkdir -p docs/guides
        mkdir -p docs/reports
        
        # 复制现有文档
        if [ -d "Docs" ]; then
          cp -r Docs/* docs/guides/ || true
        fi
        
        # 生成安装指南
        cat > docs/guides/installation.md << 'EOF'
# 安装指南

## 系统要求

- **编译器**: GCC 9+ / Clang 10+ / MSVC 2019+
- **构建系统**: Bazel 6.0+
- **操作系统**: Linux / macOS / Windows
- **内存**: 建议 8GB+
- **磁盘**: 2GB+ (包含依赖)

## 安装步骤

### 1. 克隆项目
```bash
git clone https://github.com/lz1287209575/helianthus.git
cd helianthus
```

### 2. 安装 Bazel
```bash
# Ubuntu/Debian
sudo apt install bazel

# macOS
brew install bazel

# Windows
# 下载并安装 Bazel from https://bazel.build/install
```

### 3. 构建项目
```bash
# 构建所有组件
bazel build //...

# 构建特定组件
bazel build //Shared/MessageQueue:message_queue
```

### 4. 运行测试
```bash
# 运行所有测试
bazel test //...

# 运行特定测试
bazel test //Tests/Message:all
```
EOF
        
        echo "User guides generated successfully"

    - name: 'Generate performance reports'
      shell: bash
      if: contains(inputs.doc-types, 'performance')
      run: |
        echo "Generating performance reports..."
        
        # 创建性能报告目录
        mkdir -p docs/reports/performance
        
        # 生成性能报告模板
        cat > docs/reports/performance/benchmark-template.md << 'EOF'
# 性能基准测试报告

## 测试环境

- **系统**: Ubuntu 20.04 LTS
- **CPU**: Intel/AMD x86_64
- **内存**: 8GB+
- **编译器**: GCC 9+ / Clang 10+

## 测试结果

### 消息队列性能

| 测试场景 | 吞吐量 (msg/s) | 延迟 (ms) | 内存使用 (MB) |
|---------|----------------|------------|----------------|
| 单生产者单消费者 | TBD | TBD | TBD |
| 多生产者单消费者 | TBD | TBD | TBD |
| 单生产者多消费者 | TBD | TBD | TBD |
| 多生产者多消费者 | TBD | TBD | TBD |

### 压缩性能

| 算法 | 压缩率 (%) | 压缩速度 (MB/s) | 解压速度 (MB/s) |
|------|-------------|-----------------|-----------------|
| GZIP | TBD | TBD | TBD |
| LZ4 | TBD | TBD | TBD |
| ZSTD | TBD | TBD | TBD |
| Snappy | TBD | TBD | TBD |

### 加密性能

| 算法 | 加密速度 (MB/s) | 解密速度 (MB/s) | 密钥大小 (bits) |
|------|-----------------|-----------------|-----------------|
| AES-128-CBC | TBD | TBD | 128 |
| AES-256-CBC | TBD | TBD | 256 |
| AES-128-GCM | TBD | TBD | 128 |
| AES-256-GCM | TBD | TBD | 256 |
| ChaCha20-Poly1305 | TBD | TBD | 256 |

## 结论

性能测试结果将在实际运行后填充。
EOF
        
        echo "Performance reports generated successfully"

    - name: 'Create documentation index'
      shell: bash
      run: |
        echo "Creating documentation index..."
        
        # 创建文档索引
        cat > docs/README.md << 'EOF'
# Helianthus 项目文档

## 文档结构

- **API文档**: [API Reference](doxygen/html/index.html)
- **用户指南**: [User Guides](guides/)
- **性能报告**: [Performance Reports](reports/)
- **示例代码**: [Examples](../Examples/)

## 快速开始

1. [安装指南](guides/installation.md)
2. [配置说明](guides/configuration.md)
3. [部署指南](guides/deployment.md)

## 开发文档

- [API 参考](doxygen/html/index.html)
- [架构设计](../Docs/Architecture.md)
- [测试指南](../Tests/README.md)

## 维护

本文档由 CI/CD 流水线自动生成。
EOF
        
        echo "Documentation index created successfully"

    - name: 'Upload documentation artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        retention-days: 90
