# 文档生成工具

genrule(
    name = "api_docs",
    srcs = glob([
        "../Shared/**/*.h",
        "../Shared/**/*.cpp",
        "../Shared/**/*.hpp",
    ]),
    outs = ["docs_generated"],
    cmd = """
        # 创建输出目录
        mkdir -p docs/doxygen
        
        # 检查 doxygen 是否可用
        if command -v doxygen >/dev/null 2>&1; then
            # 创建 Doxyfile
            cat > Doxyfile << 'EOF'
PROJECT_NAME = "Helianthus API"
PROJECT_NUMBER = "1.0"
PROJECT_BRIEF = "高性能、可扩展的微服务游戏服务器架构"
OUTPUT_DIRECTORY = docs/doxygen
GENERATE_HTML = YES
GENERATE_LATEX = NO
EXTRACT_ALL = YES
EXTRACT_PRIVATE = YES
EXTRACT_STATIC = YES
HAVE_DOT = YES
UML_LOOK = YES
CALL_GRAPH = YES
CALLER_GRAPH = YES
INPUT = ../Shared/
FILE_PATTERNS = *.h *.cpp *.hpp
RECURSIVE = YES
EXCLUDE_PATTERNS = */ThirdParty/* */Tests/*
HTML_OUTPUT = html
HTML_TIMESTAMP = YES
GENERATE_LATEX = NO
EOF
            
            # 生成文档
            doxygen Doxyfile
            
            # 创建标记文件
            touch $@
        else
            echo "Doxygen not found, skipping API docs generation"
            touch $@
        fi
    """,
    tools = ["//tools:generate_docs.sh"],
)

# 文档生成脚本
filegroup(
    name = "generate_docs_script",
    srcs = ["generate_docs.sh"],
    visibility = ["//visibility:public"],
)

# 用户指南生成
genrule(
    name = "user_guides",
    srcs = [
        "../Docs/PerformanceBenchmarkReport.md",
        "../Docs/DistributedTransactionValidationReport.md",
        "../Docs/Grafana_Setup_Guide.md",
    ],
    outs = ["guides_generated"],
    cmd = """
        mkdir -p docs/guides
        mkdir -p docs/reports
        
        # 复制现有文档
        cp $(location ../Docs/PerformanceBenchmarkReport.md) docs/reports/
        cp $(location ../Docs/DistributedTransactionValidationReport.md) docs/reports/
        cp $(location ../Docs/Grafana_Setup_Guide.md) docs/guides/
        
        # 创建用户指南
        cat > docs/guides/installation.md << 'EOF'
# 安装指南

## 系统要求

- **编译器**: GCC 9+ / Clang 10+ / MSVC 2019+
- **构建系统**: Bazel 6.0+
- **操作系统**: Linux / macOS / Windows
- **内存**: 建议 8GB+
- **磁盘**: 2GB+ (包含依赖)

## 安装步骤

### 1. 克隆项目
```bash
git clone https://github.com/lz1287209575/helianthus.git
cd helianthus
```

### 2. 安装 Bazel
```bash
# Ubuntu/Debian
sudo apt install bazel

# macOS
brew install bazel

# Windows
# 下载并安装 Bazel from https://bazel.build/install
```

### 3. 构建项目
```bash
# 构建所有组件
bazel build //...

# 构建特定组件
bazel build //Shared/MessageQueue:message_queue
```

### 4. 运行测试
```bash
# 运行所有测试
bazel test //...

# 运行特定测试
bazel test //Tests/Message:all
```
EOF

        cat > docs/guides/configuration.md << 'EOF'
# 配置说明

## 消息队列配置

### 基本配置
```cpp
QueueConfig Config;
Config.Name = "my_queue";
Config.Persistence = PersistenceMode::MEMORY_ONLY;
Config.MaxSize = 10000;
Config.TimeoutMs = 5000;
```

### 压缩配置
```cpp
CompressionConfig CompConfig;
CompConfig.Algorithm = CompressionAlgorithm::GZIP;
CompConfig.Level = 6;
CompConfig.MinSize = 100;
CompConfig.EnableAutoCompression = true;
```

### 加密配置
```cpp
EncryptionConfig EncConfig;
EncConfig.Algorithm = EncryptionAlgorithm::AES_256_GCM;
EncConfig.Key = "MySecretKey12345";
EncConfig.EnableAutoEncryption = true;
```
EOF

        cat > docs/guides/deployment.md << 'EOF'
# 部署指南

## 生产环境部署

### 1. 系统准备
- 确保系统满足最低要求
- 配置防火墙和网络
- 准备监控和日志系统

### 2. 服务部署
```bash
# 构建生产版本
bazel build //... --config=release

# 部署服务
./deploy.sh
```

### 3. 监控配置
- 配置 Prometheus 监控
- 设置 Grafana 仪表板
- 配置告警规则

### 4. 性能调优
- 调整内存池配置
- 优化网络参数
- 配置负载均衡
EOF

        touch $@
    """,
)
